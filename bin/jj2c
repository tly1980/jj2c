#!/usr/bin/env python

from __future__ import print_function

import argparse
import json
import os
import sys

from jj2c import eprint
import jj2c

AP = argparse.ArgumentParser()
AP.add_argument('template', help='file pointing to template')
AP.add_argument(
    '-V', '--variables', default=[],
    nargs='+', help='Content or files pointing to variables. Supported formats are: json, yaml and toml.')
AP.add_argument('-o', '--output', default='-', help='where to save the file')


def is_tpl(fpath):
  if not os.path.isfile(fpath):
    raise Exception('No such *FILE*: %s' % fpath)
  return not fpath.endswith('.zip')


def load_variables(fname_or_content):
  ve = jj2c.VariableExtractor(fname_or_content)
  fmt, variables = ve.extract()
  return variables


def dump_file(fpath, content):
  if fpath == '-':
    sys.stdout.write(content)
    sys.stdout.flush()
  else:
    with open(fpath, 'w') as f:
      f.write(content)


def main(args):
  variables = {}
  for file_or_content in args.variables:
    x_variables = load_variables(file_or_content)
    variables.update(x_variables)

  if is_tpl(args.template):
    with open(args.template) as f:
      eprint('tpl(zip) to stdout')
      dump_file(args.output, jj2c.compile(f.read(), variables))
  elif args.template.endswith('.zip') and args.output.endswith('.zip'):
    eprint('tpl(zip) to zip')
    jj2c.compile_zip_2_zip(args.template, args.output, variables)
  elif args.template.endswith('.zip') and not args.output.endswith('.zip'):
    eprint('tpl(zip) to dir')
    jj2c.compile_zip_2_dir(args.template, args.output, variables)
  elif not args.template.endswith('.zip') and args.output.endswith('.zip'):
    eprint('tpl(dir) to zip')
    jj2c.compile_dir_2_zip(args.template, args.output, variables)
  elif not args.template.endswith('.zip') and not args.output.endswith('.zip'):
    eprint('tpl(dir) to dir')
    jj2c.compile_dir(args.template, args.output, variables)
  else:
    print('Unsupported')


if __name__ == '__main__':
  main(AP.parse_args())
